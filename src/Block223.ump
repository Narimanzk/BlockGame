namespace ca.mcgill.ecse223.block.model;
use Block223Persistence;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
   before constructor, setUsername{
   		if(getWithUsername(aUsername) != null){
   			throw new RuntimeException("The username has already been taken");
   		}
   	}
   	before constructor, setUsername {
    	if (aUsername == null || aUsername.length() == 0) {
	  		throw new RuntimeException("The username must be specified.");
		}
	}
   	
   		
}

class UserRole {
   abstract;
   password;
   before constructor, setPassword{
   		if (aPassword == null || aPassword.length() == 0){
   			throw new RuntimeException("The player password needs to be specified.");
   		}
   	}
   		
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   before constructor, setName {
    	if (aName == null || aName.length() == 0) {
	  		throw new RuntimeException("The name of a game must be specified.");
		}
	}
	before constructor, setNrBlocksPerLevel{
		if (nrBlocksPerLevel <= 0){
  			throw new RuntimeException("The number of blocks per level must be greater than zero.");
  		}
  	}
  	before getLevel {
    	if ( index < 1 || index > levels.size()) {
			throw new IndexOutOfBoundsException("Level" + index + "does not exist for the game");
		}
	}
			
		
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   before setGridHorizontalPosition {
	   	//1 Column padding at each side
	    int maxNumberHorizontalBlocks = (Game.PLAY_AREA_SIDE - 2 * Game.COLUMNS_PADDING) / Block.SIZE;
	    if ( aGridHorizontalPosition <= 0 || aGridHorizontalPosition > maxNumberHorizontalBlocks ) {
			throw new RuntimeException("The horizontal position must be between 1 and " + maxNumberHorizontalBlocks + ".");
		}
	}	
	before setGridVerticalPosition {
		//1 Row padding at the top
	    int maxNumberVerticalBlocks = (Game.PLAY_AREA_SIDE - Game.ROW_PADDING) / Block.SIZE;
	    if ( aGridVerticalPosition <= 0 || aGridVerticalPosition > maxNumberVerticalBlocks ) {
	 		throw new RuntimeException("The vertical position must be between 1 and " + maxNumberVerticalBlocks + ".");
		}
	}
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
   	before constructor, setMinBallSpeedX{
		if (aMinBallSpeedX <= 0){
  			throw new RuntimeException("The minimum speed of the ball mut be greater than zero.");
  		}
  	}
	before constructor, setMinBallSpeedY{
		if (aMinBallSpeedY <= 0){
  			throw new RuntimeException("The minimum speed of the ball mut be greater than zero.");
  		}
  	}
	before constructor, setBallSpeedIncreaseFactor{
		if (aBallSpeedIncreaseFactor <= 0){
  			throw new RuntimeException("The speed increase factor of the ball mut be greater than zero.");
  		}
  	}
   
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
   	before constructor, setMaxPaddleLength{
		if (aMaxPaddleLength <= 0 || aMaxPaddleLength > 390){
  			throw new RuntimeException("The maximum length of the paddle be greater than zero and less than or equal to 390.");
  		}
  	}
	before constructor, setMinPaddleLength{
		if (aMinPaddleLength <= 0){
  			throw new RuntimeException("The minimum length of the paddle be greater than zero.");
  		}
  	}
   
}
