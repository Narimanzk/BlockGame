class Block223 {
   1 <@>- * PlayedGame playedGames;
   1 <@>- * HallOfFameEntry entries;
}

class Game {
   Boolean published = false;
   1 -> 0..1 HallOfFameEntry mostRecentEntry;
}

class PlayedGame {
   const Integer INITIAL_WAIT_TIME = 1000; // at design time, the initial wait time may be adjusted as seen fit
   autounique id;
   const Integer NR_LIVES = 3;
   Integer score = 0;
   Integer lives = NR_LIVES;
   Integer currentLevel = 1;
   Double waitTime = INITIAL_WAIT_TIME;
   * -- 0..1 Player player; // an admin may test the game; a game is played in test mode if player == null
   playername; // added here so that it only needs to be determined once
   
   // the PlayedBall and PlayedPaddle are not in a separate class to avoid the bug in Umple that occurred for the second constructor of Game

   // no direct link to Ball, because the ball can be found by navigating to PlayedGame, Game, and then Ball
   const Integer BALL_INITIAL_X = Game.PLAY_AREA_SIDE / 2;
   const Integer BALL_INITIAL_Y = Game.PLAY_AREA_SIDE / 2;
   // 0/0 is the top left corner of the play area, i.e., a directionX/Y of 0/1 moves the ball down in a straight line
   defaulted Double ballDirectionX = getGame().getBall().getMinBallSpeedX();
   defaulted Double ballDirectionY = getGame().getBall().getMinBallSpeedY();
   // the position of the ball is at the center of the ball
   defaulted Double currentBallX = BALL_INITIAL_X;
   defaulted Double currentBallY = BALL_INITIAL_Y;

   // no direct link to Paddle, because the paddle can be found by navigating to PlayedGame, Game, and then Paddle
   const Integer PADDLE_MOVE_RIGHT = 1; // pixels moved when right arrow key is pressed
   const Integer PADDLE_MOVE_LEFT = -1; // pixels moved when left arrow key is pressed
   Double currentPaddleLength = getGame().getPaddle().getMaxPaddleLength();
   // the position of the paddle is at its top right corner
   defaulted Double currentPaddleX = (Game.PLAY_AREA_SIDE - currentPaddleLength) / 2;
   immutable Double currentPaddleY = Game.PLAY_AREA_SIDE - Paddle.VERTICAL_DISTANCE - Paddle.PADDLE_WIDTH;

   * -- 1 Game game;
   1 <@>- * PlayedBlockAssignment blocks;
   0..1 -> 0..1 BouncePoint bounce;
   
   private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment aBlock) {
	   //BouncePoint(double aX, double aY, BounceDirection aDirection)
	   int size = aBlock.getBlock().SIZE;
	   int borderSize = size+20;
	   double leftX = aBlock.getX()-(size+10);
	   double bottomY = aBlock.getY()-10;
	   Rectangle2D blockBoundary = new Rectangle2D.Double(leftX,bottomY,borderSize,borderSize);
	   Point2D ballCoords = new Point2D.Double(currentBallX, currentBallY);
	   Point2D ballNewCoords = new Point2D.Double(currentBallX+ballDirectionX, currentBallY+ballDirectionY);
	   Line2D.Double ballPath = new Line2D.Double(ballCoords, ballNewCoords);
	   
	   if(!blockBoundary.intersectsLine(ballPath)) {
		   return null;
	   }
	   double rightX = leftX + borderSize;
	   double topY = bottomY + borderSize;
	   
	   Line2D.Double top = new Line2D.Double(leftX,topY,rightX,topY);
	   Line2D.Double bottom = new Line2D.Double(leftX, bottomY, rightX, bottomY);
	   Line2D.Double right = new Line2D.Double(rightX, topY, rightX, bottomY);
	   Line2D.Double left = new Line2D.Double(leftX, topY, leftX, bottomY);
	   
	   ArrayList<Point2D> intersects = new ArrayList<Point2D>();
	   
	   if(ballPath.intersectsLine(top)) {
		   intersects.add(getIntersection(ballPath,top));
	   }
	   if(ballPath.intersectsLine(bottom)) {
		   intersects.add(getIntersection(ballPath,bottom));
	   }
	   if(ballPath.intersectsLine(left)) {
		   intersects.add(getIntersection(ballPath,left));
	   }
	   if(ballPath.intersectsLine(right)) {
		   intersects.add(getIntersection(ballPath,right));
	   }
	   double minDistance = ballCoords.distance(intersects.get(0));
	   Point2D closestPoint=intersects.get(0);
	   for(int i=1;i<intersects.size();i++) {
		   double distance = ballCoords.distance(intersects.get(i));
		   if(distance<minDistance) {
			   closestPoint = intersects.get(i);
			   minDistance = distance;
		   }
	   }//we now have the closest intersect point! So how do we flip?
	   
	   if(closestPoint.getX()<rightX-10 && closestPoint.getX()>leftX+10) {
		   BouncePoint finalBP = new BouncePoint(closestPoint.getX(),closestPoint.getY(),BouncePoint.BounceDirection.FLIP_Y);
		   return finalBP;
	   }else if(closestPoint.getY()<topY-10 && closestPoint.getY()>bottomY+10) {
		   BouncePoint finalBP = new BouncePoint(closestPoint.getX(),closestPoint.getY(),BouncePoint.BounceDirection.FLIP_X);
		   return finalBP;
	   }else {
		   BouncePoint finalBP = new BouncePoint(closestPoint.getX(),closestPoint.getY(),BouncePoint.BounceDirection.FLIP_BOTH);
		   return finalBP;
	   }
   }
   
   private static Point2D getIntersection(final Line2D.Double line1, final Line2D.Double line2) {
       final double x1,y1, x2,y2, x3,y3, x4,y4;
       x1 = line1.x1; y1 = line1.y1; x2 = line1.x2; y2 = line1.y2;
       x3 = line2.x1; y3 = line2.y1; x4 = line2.x2; y4 = line2.y2;
       final double x = (
               (x2 - x1)*(x3*y4 - x4*y3) - (x4 - x3)*(x1*y2 - x2*y1)
               ) /
               (
               (x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4)
               );
       final double y = (
               (y3 - y4)*(x1*y2 - x2*y1) - (y1 - y2)*(x3*y4 - x4*y3)
               ) /
               (
               (x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4)
               );
       return new Point2D.Double(x, y);
	}
   
    private boolean isCloser(BouncePoint bp, BouncePoint bounce) {
	   if(bp == null) {
		   return false;
	   }
	   if(bounce == null) {
		   return true;
	   }
	   double bpDist =Math.sqrt(Math.pow(Math.abs(currentBallX-bp.getX()),2)+Math.pow(Math.abs(currentBallY-bp.getY()),2));
	   double bounceDist = Math.sqrt(Math.pow(Math.abs(currentBallX-bounce.getX()),2)+Math.pow(Math.abs(currentBallY-bounce.getY()),2));;
	   if(bpDist<=bounceDist) {
		   return true;
	   }else {
		   return false;
	   }
	}
}

class PlayedBlockAssignment {
   // the associated block is either (a) the same as the one of the corresponding BlockAssignent or (b) randomly chosen
   * -- 1 Block block;
   // the position of a block is at its top right corner
   Integer x;
   Integer y;
}

class HallOfFameEntry {
   Integer score;
   playername; // added here so that it only needs to be determined once
   * -- 1 Player player;
   // the sorted keyword keeps the list of entries in the game automatically sorted by the score
   * sorted {score} -- 1 Game game;
}

// this class needs to be specified but the use of it is optional; it is also not added to the persistence file
// you may implement bounce behavior differently
class BouncePoint {
   Double x;
   Double y;
   enum BounceDirection { FLIP_X, FLIP_Y, FLIP_BOTH }
   BounceDirection direction;
   0..1 -> 0..1 PlayedBlockAssignment hitBlock;
}