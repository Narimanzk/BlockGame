class Play{
	Boolean isTest; 
	1 -- 1 BallInPlay ball;
	1 -- 1 PaddleInPlay paddle;
	1 -- 1 GameInPlay game;
	
	Status{
		Idle{
			//Start the game:
			
			StartGame/{
				isTest = false; 
				initalizePaddlePosition(); //Place the paddle in the middle, 30 units above.
				dropBallFromStartingPoint();	//Drop the ball from the starting point.
				
			}->Playing;
			//Test the game:
			
			TestGame/{
				isTest = true;
				initalizePaddlePosition(); //Place the paddle in the middle, 30 units above.
				dropBallFromStartingPoint();	//Drop the ball from the starting point.
				
			}->Playing;
			
		}
		Playing{

			//Entry:
			
			do{
			
			ballMoving(); 
			paddleMoving();
			
			}
			
			Pause[spaceIsPressed()]/{
			//set speeds to 0 as entry
			
			}->Paused;
			
			//If the game ends and we were testing
			
			GameEnd[isTest && (GameInPlay.getBlocksOnTheField().size() == 0 || PlayerInPlay.getLivesLeft() == 0)]/{
			}->Idle;
			
			//If the game ends and we were playing for real
			
			GameEnd[!isTest && (GameInPlay.getBlocksOnTheField().size() == 0 || PlayerInPlay.getLivesLeft() == 0)]/{
			}->End;
			
		
			//If the ball is out of bounds and we have >1 life left
							
			BallOutOfBounds[isBlockOutOfBounds(BallInPlay.getXCurPos(),allInPlay.getYCurPos()) && PlayerInPlay.getLivesLeft() > 1]/{
			deductLives();
			}->Paused;
			
			
			//UMPLE WILL MERGE THE FOLLOWING TWO INTO ONE METHOD:
			
			//If the ball is out of bounds and we have 1 life left
				
			BallOutOfBounds[isBlockOutOfBounds(BallInPlay.getXCurPos(),allInPlay.getYCurPos()) && PlayerInPlay.getLivesLeft() == 1]/{
			
			deductLives();
			}->End;
			//If the ball is in open space
				
			BallHitNothing[isBallInSpace(BallInPlay.getXCurPos(),allInPlay.getYCurPos())]/{
			}->Playing;
			
			//BallHitBLock
			BallHitBlock[isABlockHit(BallInPlay.getXCurPos(),allInPlay.getYCurPos())]/{
			//isBlockHit is a private method that we create
			
				numBlocks=numBlocks-1;
				redirectBall();
				removeBlockAssignment(BallInPlay.getXCurPos(),BallInPlay.getYCurPos()); //Points will be added within this method
				
			}->Playing;
			
			//BallHitPaddleOrWall:
			BallHitPaddleOrWall[isaWallOrPaddleHit(BallInPlay.getXCurPos(),allInPlay.getYCurPos())]/{
			//Within the guard is a private method we created to determine if the ball hit a wall/paddle
			
			redirectBall();
			}->Playing;
		}
		
		Paused{
			do { 
				pauseGame();
				saveGameState(); 
			}
			
			Unpause[spaceIsPressed()]/{
				unpauseGame();
			}->Playing;
		}
		
		End{
			do{
				updateHallOfFame(); //Update the hall of fame with stats.
			}
		}
	}
}