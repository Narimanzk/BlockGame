class PlayedGame {
depend java.util.*;
depend java.awt.geom.*;
  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
     BouncePoint bp = calculateBouncePointPaddle();
	   setBounce(bp);
	   return (bp!=null);
  }

  private boolean isOutOfBoundsAndLastLife() {
  		boolean outOfBounds = false;
		if (getLives() == 1) {
			outOfBounds = isOutOfBounds();
		}
		return outOfBounds;
  }
  
  private boolean isOutOfBounds() {
		return (this.getCurrentBallY() + Ball.BALL_DIAMETER > 390);
  }
  
   private boolean hitLastBlockAndLastLevel(){
	   Game game = getGame();
	   int nrLevels = game.numberOfLevels();
	   setBounce(null);
	   if(nrLevels == currentLevel) {
		   int nrBlocks = numberOfBlocks();
		   if(nrBlocks == 1) {
			   PlayedBlockAssignment block = getBlock(0);
			   BouncePoint bp = calculateBouncePointBlock(block);
			   setBounce(bp);
			   return (bp != null);
		   }
	   }
    return false;
  }
  
   private boolean hitLastBlock(){
	   int nrBlocks = numberOfBlocks();
	   setBounce(null);
	   if(nrBlocks==1) {
		   PlayedBlockAssignment block = getBlock(0);
		   BouncePoint bp = calculateBouncePointBlock(block);
		   setBounce(bp);
		   return (bp != null);
	   }
    return false;
  }
  
  private boolean hitBlock(){
	   int nrBlocks = numberOfBlocks();
	   setBounce(null);
	   for(int i=0;i<nrBlocks;i++) {
		   PlayedBlockAssignment aBlock = getBlock(i);
		   BouncePoint bp = calculateBouncePointBlock(aBlock);
		   bounce = getBounce();
		   boolean closer = isCloser(bp, bounce);
		   if(closer) {
			   setBounce(bp);
		   }
	   }
    return (getBounce() != null);
  }
  
  private boolean hitWall() {
    BouncePoint bp = calculateBouncePointWall();
	   setBounce(bp);
	   return (bp != null);
  }
  
  // Actions
  
    private void doSetup() {
	    resetCurrentBallX();
		resetCurrentBallY();
		resetBallDirectionX();
		resetBallDirectionY();
		resetCurrentPaddleX();
		getGame();
		Level level = game.getLevel(currentLevel-1);
		List<BlockAssignment> assignments = level.getBlockAssignments();
		for(BlockAssignment a : assignments) {
			PlayedBlockAssignment pblock = new PlayedBlockAssignment(
					(Game.WALL_PADDING+Block.SIZE+Game.COLUMNS_PADDING) *(a.getGridHorizontalPosition()-1),
					(Game.WALL_PADDING+Block.SIZE+Game.ROW_PADDING) *(a.getGridVerticalPosition()-1), a.getBlock(), this);
		}
		
		while(numberOfBlocks() < game.getNrBlocksPerLevel()) {
			//lets not be random no idea how to chekc if grid is taken TODO
			Random rand = new Random();
			int x = rand.nextInt((390%20));
			int y = rand.nextInt((390%20));
			
			boolean canPlace = true;
			for(int i = y; i < 20; i++) {
				for(int j = x; j < 20; j++) {
					for (BlockAssignment ba : assignments) {
						if (j == ba.getGridHorizontalPosition() || i == ba.getGridVerticalPosition()) {
							canPlace = false;
						}
					}
					if(canPlace) {
						PlayedBlockAssignment pblock = new PlayedBlockAssignment(j, i, game.getRandomBlock(), this);
					}	
				}
			}
		}
	  }
  
  private void doHitPaddleOrWall() {
    bounceBall();
  }

  private void doOutOfBounds() {
    		setLives(getLives()-1);
		resetCurrentBallX();
		resetCurrentBallY();
		resetBallDirectionX();
		resetBallDirectionY();
		resetCurrentPaddleX();
  }

   private void doHitBlock(){
	   int score = getScore();
	   BouncePoint bounce = getBounce();
	   PlayedBlockAssignment pBlock = bounce.getHitBlock();
	   Block block = pBlock.getBlock();
	   int points = block.getPoints();
	   setScore(score+points);
	   pBlock.delete();
	   bounceBall();
  }

   private void doHitBlockNextLevel(){
	   doHitBlock();
	   int level = getCurrentLevel();
	   setCurrentLevel(level+1);
	   setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength()-
			   (getGame().getPaddle().getMaxPaddleLength()-
					   getGame().getPaddle().getMinPaddleLength())/
			   (getGame().numberOfLevels()-1)*(getCurrentLevel()-1));
	   setWaitTime(INITIAL_WAIT_TIME * Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), (getCurrentLevel())-1));
  }

  private void doHitNothingAndNotOutOfBounds() {
	double x = currentBallX;
  double y = currentBallY;
  double dx = getBallDirectionX();
  double dy = getBallDirectionY();
  setCurrentBallX(x+dx);
  setCurrentBallY(y+dy);
    
  }

  private void doGameOver() {
		Player p = getPlayer();
		if (p != null) {
			Game curGame = getGame();
			HallOfFameEntry hof = new HallOfFameEntry(score,playername,p,game,block223);
			curGame.setMostRecentEntry(hof);
		}
		delete();
  }

}