namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
      public PlayedGame findPlayableGame(int id) {
	   PlayedGame pGame = null;
	   for(PlayedGame pgame : getPlayedGames()) {
		   if(pgame.getId() == id)
			   pGame = pgame;  
	   }
	   return pGame;
   }
   
}

class User {
depend java.util.Map.Entry;
   unique username;
   1 -> 1..2 UserRole roles;
    public static  String findUsername(UserRole player){
    String username = "";
	   Map<User, String> newMap = new HashMap<>();
	   for(Entry<String, User> entry : usersByUsername.entrySet()) {
		   newMap.put(entry.getValue(), entry.getKey());
	   }
	   username =  newMap.get(player);
	   
	   return username;
  }
}

class UserRole {
   abstract;
   password;
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
   public Block getRandomBlock(){
   	int max = this.getBlocks().size();
   	Random rand = new Random();
   	int n = rand.nextInt(max);
   	Block block = this.getBlock(n);
   	return block;
   }
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
}
